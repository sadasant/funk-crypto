module Crypto::NEWDES
  ROTOR = [0x20, 0x89, 0xef, 0xbc, 0x66, 0x7d, 0xdd, 0x48,
           0xd4, 0x44, 0x51, 0x25, 0x56, 0xed, 0x93, 0x95,
           0x46, 0xe5, 0x11, 0x7c, 0x73, 0xcf, 0x21, 0x14,
           0x7a, 0x8f, 0x19, 0xd7, 0x33, 0xb7, 0x8a, 0x8e,
           0x92, 0xd3, 0x6e, 0xad,  0x1, 0xe4, 0xbd,  0xe,
           0x67, 0x4e, 0xa2, 0x24, 0xfd, 0xa7, 0x74, 0xff,
           0x9e, 0x2d, 0xb9, 0x32, 0x62, 0xa8, 0xfa, 0xeb,
           0x36, 0x8d, 0xc3, 0xf7, 0xf0, 0x3f, 0x94,  0x2,
           0xe0, 0xa9, 0xd6, 0xb4, 0x3e, 0x16, 0x75, 0x6c,
           0x13, 0xac, 0xa1, 0x9f, 0xa0, 0x2f, 0x2b, 0xab,
           0xc2, 0xaf, 0xb2, 0x38, 0xc4, 0x70, 0x17, 0xdc,
           0x59, 0x15, 0xa4, 0x82, 0x9d,  0x8, 0x55, 0xfb,
           0xd8, 0x2c, 0x5e, 0xb3, 0xe2, 0x26, 0x5a, 0x77,
           0x28, 0xca, 0x22, 0xce, 0x23, 0x45, 0xe7, 0xf6,
           0x1d, 0x6d, 0x4a, 0x47, 0xb0,  0x6, 0x3c, 0x91,
           0x41,  0xd, 0x4d, 0x97,  0xc, 0x7f, 0x5f, 0xc7,
           0x39, 0x65,  0x5, 0xe8, 0x96, 0xd2, 0x81, 0x18,
           0xb5,  0xa, 0x79, 0xbb, 0x30, 0xc1, 0x8b, 0xfc,
           0xdb, 0x40, 0x58, 0xe9, 0x60, 0x80, 0x50, 0x35,
           0xbf, 0x90, 0xda,  0xb, 0x6a, 0x84, 0x9b, 0x68,
           0x5b, 0x88, 0x1f, 0x2a, 0xf3, 0x42, 0x7e, 0x87,
           0x1e, 0x1a, 0x57, 0xba, 0xb6, 0x9a, 0xf2, 0x7b,
           0x52, 0xa6, 0xd0, 0x27, 0x98, 0xbe, 0x71, 0xcd,
           0x72, 0x69, 0xe1, 0x54, 0x49, 0xa3, 0x63, 0x6f,
           0xcc, 0x3d, 0xc8, 0xd9, 0xaa,  0xf, 0xc6, 0x1c,
           0xc0, 0xfe, 0x86, 0xea, 0xde,  0x7, 0xec, 0xf8,
           0xc9, 0x29, 0xb1, 0x9c, 0x5c, 0x83, 0x43, 0xf9,
           0xf5, 0xb8, 0xcb,  0x9, 0xf1,  0x0, 0x1b, 0x2e,
           0x85, 0xae, 0x4b, 0x12, 0x5d, 0xd1, 0x64, 0x78,
           0x4c, 0xd5, 0x10, 0x53,  0x4, 0x6b, 0x8c, 0x34,
           0x3a, 0x37,  0x3, 0xf4, 0x61, 0xc5, 0xee, 0xe3,
           0x76, 0x31, 0x4f, 0xe6, 0xdf, 0xa5, 0x99, 0x3b]

  def self.enlarge(buf)
    dif  = buf.size/8
    plus = ((dif+1)*8) - buf.size
    buf += "0" * plus
  end

  def self.bytes(s)
    a = []
    s.each_byte do |e|
      a << e
    end
    a
  end

  def self.str(b)
    b.map{ |e| e.chr }.join("")
  end

  def self.encrypt(buf, key)
    buf = enlarge(buf) if buf.size%8 != 0

    buf = bytes(buf)
    key = bytes(key)
    ex  = 0
    i   = 0

    while true
      buf[4] ^= ROTOR[buf[0] ^ key[i] ^ ex]; i += 1
      i, ex = 0, key[7] if i == 15
      buf[5] ^= ROTOR[buf[1] ^ key[i] ^ ex]; i += 1
      i, ex = 0, key[8] if i == 15
      buf[6] ^= ROTOR[buf[2] ^ key[i] ^ ex]; i += 1
      i, ex = 0, key[9] if i == 15
      buf[7] ^= ROTOR[buf[3] ^ key[i] ^ ex]; i += 1
      return str(buf) if i == 15

      buf[1] ^= ROTOR[buf[4] ^ key[i] ^ ex]; i += 1
      buf[2] ^= ROTOR[buf[4] ^ buf[5]]
      buf[3] ^= ROTOR[buf[6] ^ key[i] ^ ex]; i += 1
      buf[0] ^= ROTOR[buf[7] ^ key[i] ^ ex]; i += 1
    end
  end

  def self.decrypt(buf, key)
    buf = bytes(buf)
    key = bytes(key)
    ex  = key[9]
    i   = 14

    while true
      buf[7] ^= ROTOR[buf[3] ^ key[i] ^ ex]
      if i == 0 then i, ex = 14, key[8] else i -= 1 end
      buf[6] ^= ROTOR[buf[2] ^ key[i] ^ ex]
      if i == 0 then i, ex = 14, key[7]; else i -= 1 end
      buf[5] ^= ROTOR[buf[1] ^ key[i] ^ ex]
      if i == 0 then i, ex = 14, 0; else i -= 1 end
      buf[4] ^= ROTOR[buf[0] ^ key[i] ^ ex]
      if i == 0 then return str(buf); else i -= 1 end

      buf[0] ^= ROTOR[buf[7] ^ key[i] ^ ex]; i -= 1
      buf[3] ^= ROTOR[buf[6] ^ key[i] ^ ex]; i -= 1
      buf[2] ^= ROTOR[buf[4] ^ buf[5]]
      buf[1] ^= ROTOR[buf[4] ^ key[i] ^ ex]; i -= 1
    end
  end
end
